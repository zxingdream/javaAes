import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.Objects;

public class AESUtils {

    /**
     * AES加密
     *
     * @param plaintext   明文
     * @param key         密钥
     * @param encryptMode AES加密模式，CBC或ECB
     * @return 该字符串的AES密文值
     */
    public static String aesEncrypt(Object plaintext, String key, String encryptMode) {
        String plainText;
        try {
            plainText = plaintext.toString();
            if (key == null) {
                return null;
            }
            key = getMD5(key);
            if (key == null) {
                return null;
            }
            byte[] raw = key.getBytes(StandardCharsets.UTF_8);
            SecretKeySpec keySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/" + encryptMode + "/PKCS5Padding");
            if (Objects.equals(encryptMode, "ECB")) {
                cipher.init(Cipher.ENCRYPT_MODE, keySpec);
            } else {
                // 使用CBC模式，需要一个向量iv，可增加加密算法的强度
                IvParameterSpec iv = new IvParameterSpec(key.getBytes(StandardCharsets.UTF_8));
                cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);
            }
            byte[] encrypted = cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception ex) {
            log.warn("AES加密错误：{}", ex.getMessage());
            return null;
        }
    }

    /**
     * AES解密
     *
     * @param ciphertext 密文
     * @param key        密钥
     * @param encryptMode AES加密模式，CBC或ECB
     * @return 该密文的明文
     */
    public static String aesDecrypt(Object ciphertext, String key, String encryptMode) {
        String cipherText;
        try {
            cipherText = ciphertext.toString();
            // 判断Key是否正确
            if (key == null) {
                return null;
            }
            key = getMD5(key);
            if (key == null) {
                return null;
            }
            byte[] raw = key.getBytes(StandardCharsets.UTF_8);
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/" + encryptMode + "/PKCS5Padding");
            if (Objects.equals(encryptMode, "ECB")) {
                cipher.init(Cipher.DECRYPT_MODE, skeySpec);
            } else {
                // 使用CBC模式，需要一个向量iv，可增加加密算法的强度
                IvParameterSpec iv = new IvParameterSpec(key.getBytes(StandardCharsets.UTF_8));
                cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
            }
            // 先用base64解密
            byte[] bytes = Base64.getDecoder().decode(cipherText);
            byte[] original = cipher.doFinal(bytes);
            return new String(original, StandardCharsets.UTF_8);
        } catch (Exception ex) {
            log.warn("AES解密错误：{}", ex.getMessage());
            return null;
        }
    }

    /**
     * AES加密 url 安全 （推荐使用）
     *
     * @param plaintext   明文
     * @param key         密钥
     * @param encryptMode AES加密模式，CBC或ECB
     * @return 该字符串的AES密文值
     */
    public static String aesUrlSafeEncrypt(Object plaintext, String key, String encryptMode) {
        String data = aesEncrypt(plaintext, key, encryptMode);
        return urlSafe(data);
    }

    /**
     * AES解密 url安全（推荐使用）
     *
     * @param ciphertext 密文
     * @param key        密钥
     * @param encryptMode AES加密模式，CBC或ECB
     * @return 该密文的明文
     */
    public static String aesUrlSafeDecrypt(Object ciphertext, String key, String encryptMode) {
        String cipherText;
        try {
            cipherText = urlUnSafe(ciphertext.toString());
            return aesDecrypt(cipherText, key, encryptMode);
        } catch (Exception ex) {
            return null;
        }
    }


    /**
     * 进行MD5加密
     *
     * @param s 要进行MD5转换的字符串
     * @return 该字符串的MD5值的8-24位
     */
    public static String getMD5(String s) {
        char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        try {
            byte[] btInput = s.getBytes();
            // 获得MD5摘要算法的 MessageDigest 对象
            MessageDigest mdInst = MessageDigest.getInstance("MD5");
            // 使用指定的字节更新摘要
            mdInst.update(btInput);
            // 获得密文
            byte[] md = mdInst.digest();
            // 把密文转换成十六进制的字符串形式
            int j = md.length;
            char[] str = new char[j * 2];
            int k = 0;
            for (byte byte0 : md) {
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            return new String(str).substring(8, 24);
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * 将字符串进行URL安全编码
     *
     * @param str 待编码的字符串
     * @return URL安全的字符串
     */
    public static String urlSafe(String str) {
        str = str.replaceAll("[+]", "-");
        str = str.replace("/", "_");
        str = str.replace("=", "");
        str = str.replaceAll("\r|\n", "");
        return str;
    }

    /**
     * 将URL安全的字符串进行解码
     *
     * @param str URL安全的字符串
     * @return 解码后的字符串
     */
    public static String urlUnSafe(String str) {
        str = str.replace("-", "+");
        str = str.replace("_", "/");
        int eqLength = str.length() * 3 % 4;
        if (eqLength > 0) {
            str += StringUtils.repeat('=', eqLength);
        }
        return str;
    }
}
